#!/bin/bash

# Script d'initialisation automatique BRACONGO Stages
# Ce script s'ex√©cute au d√©marrage du container pour configurer l'application

set -e

echo "üöÄ Initialisation de BRACONGO Stages..."

# D√©marrer PHP-FPM en arri√®re-plan imm√©diatement
echo "üöÄ D√©marrage de PHP-FPM..."
php-fpm &
PHP_FPM_PID=$!

# Essayer de se connecter √† MySQL de mani√®re non-bloquante
echo "‚è≥ Tentative de connexion √† la base de donn√©es (non-bloquante)..."
(
    if php /var/www/docker/scripts/wait-for-db.php; then
        echo "‚úÖ Base de donn√©es disponible, poursuite de l'initialisation..."
        
        # Installer les d√©pendances Composer si vendor n'existe pas
        if [ ! -d "/var/www/vendor" ]; then
            echo "üì¶ Installation des d√©pendances Composer..."
            composer install --no-dev --optimize-autoloader
        fi

        # G√©n√©rer la cl√© d'application si elle n'existe pas
        if [ ! -f "/var/www/.env" ]; then
            echo "üìã Copie du fichier .env..."
            cp /var/www/.env.example /var/www/.env
        fi

        if grep -q "APP_KEY=$" /var/www/.env; then
            echo "üîë G√©n√©ration de la cl√© d'application..."
            php artisan key:generate --no-interaction
        fi

        # V√©rifier si les tables existent d√©j√†
        TABLE_COUNT=$(php artisan tinker --execute="echo \DB::connection()->getSchemaBuilder()->hasTable('users') ? '1' : '0';" 2>/dev/null | tail -1 || echo "0")

        if [ "$TABLE_COUNT" = "0" ]; then
            echo "üóÑÔ∏è Cr√©ation des tables de base de donn√©es..."
            php artisan migrate --no-interaction --force
            
            echo "üå± Insertion des donn√©es de d√©monstration..."
            php artisan db:seed --no-interaction --force
        else
            echo "‚úÖ Base de donn√©es d√©j√† initialis√©e"
            
            # Ex√©cuter les nouvelles migrations s'il y en a
            echo "üîÑ V√©rification des nouvelles migrations..."
            php artisan migrate --no-interaction --force
        fi

        # Cr√©er le lien symbolique pour le storage
        if [ ! -L "/var/www/public/storage" ]; then
            echo "üîó Cr√©ation du lien symbolique storage..."
            php artisan storage:link --no-interaction
        fi

        # Optimisations pour la production
        if [ "$APP_ENV" = "production" ]; then
            echo "‚ö° Optimisations production..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
        fi

        echo "‚úÖ Initialisation base de donn√©es termin√©e !"
    else
        echo "‚ö†Ô∏è Base de donn√©es non disponible, l'application fonctionne en mode d√©grad√©"
    fi
) &

# Fixer les permissions
echo "üîß Configuration des permissions..."
mkdir -p /var/www/bootstrap/cache
chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache
chmod -R 775 /var/www/storage /var/www/bootstrap/cache

echo "‚úÖ PHP-FPM d√©marr√© ! L'application est accessible."

# Attendre que PHP-FPM se termine (garde le container en vie)
wait $PHP_FPM_PID 